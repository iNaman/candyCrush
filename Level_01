#pragma once
#include<stdlib.h>
#include<conio.h>
namespace Candy {

	using namespace System;
	using namespace System::ComponentModel;
	using namespace System::Collections;
	using namespace System::Windows::Forms;
	using namespace System::Data;
	using namespace System::Drawing;

	/// <summary>
	/// Summary for MyForm
	/// </summary>

	public ref class MyForm : public System::Windows::Forms::Form
	{
	public:
		static array<PictureBox^>^ candies = gcnew array<PictureBox^>(5);
	public:static System::Windows::Forms::GroupBox^  groupBox1;


	public:
		static int xp1, xp2, yp1, yp2,score=0;
		static PictureBox^ pb = gcnew PictureBox();
		static array<PictureBox^, 2>^ level = gcnew array<PictureBox^, 2>(5, 8);
	private: System::Windows::Forms::Label^  label1;
	private: System::Windows::Forms::Label^  label2;
	public:


	public:
		ref class gamestate
		{
		public:
			void fillwithcandies();
			void matchingcandies();
			int droppingcandies();
		};

		ref class matching
		{
		public:
			int hormid();
			int vermid();
			int horleft();
			int horright();
			int verup();
			int verdown();
		};

	public:
		 static gamestate fc;
	public:
		MyForm(void)
		{
			InitializeComponent();
			//
			//TODO: Add the constructor code here
			//
			candies[0] = Candy::MyForm::c01;
			candies[1] = Candy::MyForm::c02;
			candies[2] = Candy::MyForm::c03;
			candies[3] = Candy::MyForm::c04;
			candies[4] = Candy::MyForm::c05;

			fc.fillwithcandies();
			fc.matchingcandies();

			//creating events 
			for (int j = 0; j < 5; j++)
			{
				for (int i = 0; i < 8; i++)
				{
					level[j, i]->MouseDown += gcnew MouseEventHandler(this, &MyForm::mousedown);
					level[j, i]->DragEnter += gcnew DragEventHandler(this, &MyForm::dragenter);
					level[j, i]->DragDrop += gcnew DragEventHandler(this, &MyForm::dragdrop);
				}
			}
		}
		
	protected:
		/// <summary>
		/// Clean up any resources being used.
		/// </summary>
		~MyForm()
		{
			if (components)
			{
				delete components;
			}
		}
	private: System::Windows::Forms::Button^  button1;
	protected:
	private: System::Windows::Forms::Button^  button2;
	public:static System::Windows::Forms::Panel^  panel1;
	private:

	private:

	private: System::Windows::Forms::Button^  back;
	public: System::Windows::Forms::PictureBox^  c01;
	private:
	public: System::Windows::Forms::PictureBox^  c02;
	public:static System::Windows::Forms::PictureBox^  emptybox;

	public: System::Windows::Forms::PictureBox^  c03;
	public: System::Windows::Forms::PictureBox^  c04;
	public: System::Windows::Forms::PictureBox^  c05;







	private:
		/// <summary>
		/// Required designer variable.
		/// </summary>
		System::ComponentModel::Container ^components;

#pragma region Windows Form Designer generated code
		/// <summary>
		/// Required method for Designer support - do not modify
		/// the contents of this method with the code editor.
		/// </summary>
		void InitializeComponent(void)
		{
			System::ComponentModel::ComponentResourceManager^  resources = (gcnew System::ComponentModel::ComponentResourceManager(MyForm::typeid));
			this->button1 = (gcnew System::Windows::Forms::Button());
			this->button2 = (gcnew System::Windows::Forms::Button());
			this->panel1 = (gcnew System::Windows::Forms::Panel());
			this->label1 = (gcnew System::Windows::Forms::Label());
			this->groupBox1 = (gcnew System::Windows::Forms::GroupBox());
			this->back = (gcnew System::Windows::Forms::Button());
			this->c01 = (gcnew System::Windows::Forms::PictureBox());
			this->c02 = (gcnew System::Windows::Forms::PictureBox());
			this->emptybox = (gcnew System::Windows::Forms::PictureBox());
			this->c03 = (gcnew System::Windows::Forms::PictureBox());
			this->c04 = (gcnew System::Windows::Forms::PictureBox());
			this->c05 = (gcnew System::Windows::Forms::PictureBox());
			this->label2 = (gcnew System::Windows::Forms::Label());
			this->panel1->SuspendLayout();
			(cli::safe_cast<System::ComponentModel::ISupportInitialize^>(this->c01))->BeginInit();
			(cli::safe_cast<System::ComponentModel::ISupportInitialize^>(this->c02))->BeginInit();
			(cli::safe_cast<System::ComponentModel::ISupportInitialize^>(this->emptybox))->BeginInit();
			(cli::safe_cast<System::ComponentModel::ISupportInitialize^>(this->c03))->BeginInit();
			(cli::safe_cast<System::ComponentModel::ISupportInitialize^>(this->c04))->BeginInit();
			(cli::safe_cast<System::ComponentModel::ISupportInitialize^>(this->c05))->BeginInit();
			this->SuspendLayout();
			// 
			// button1
			// 
			this->button1->Location = System::Drawing::Point(177, 103);
			this->button1->Name = L"button1";
			this->button1->Size = System::Drawing::Size(383, 153);
			this->button1->TabIndex = 0;
			this->button1->Text = L"PLAY";
			this->button1->UseVisualStyleBackColor = true;
			this->button1->Click += gcnew System::EventHandler(this, &MyForm::button1_Click);
			// 
			// button2
			// 
			this->button2->Location = System::Drawing::Point(161, 364);
			this->button2->Name = L"button2";
			this->button2->Size = System::Drawing::Size(439, 163);
			this->button2->TabIndex = 1;
			this->button2->Text = L"EXIT";
			this->button2->UseVisualStyleBackColor = true;
			this->button2->Click += gcnew System::EventHandler(this, &MyForm::button2_Click);
			// 
			// panel1
			// 
			this->panel1->Controls->Add(this->label2);
			this->panel1->Controls->Add(this->label1);
			this->panel1->Controls->Add(this->groupBox1);
			this->panel1->Controls->Add(this->back);
			this->panel1->Dock = System::Windows::Forms::DockStyle::Fill;
			this->panel1->Location = System::Drawing::Point(0, 0);
			this->panel1->Name = L"panel1";
			this->panel1->Size = System::Drawing::Size(752, 714);
			this->panel1->TabIndex = 2;
			this->panel1->Visible = false;
			// 
			// label1
			// 
			this->label1->AutoSize = true;
			this->label1->Location = System::Drawing::Point(64, 504);
			this->label1->Name = L"label1";
			this->label1->Size = System::Drawing::Size(44, 13);
			this->label1->TabIndex = 2;
			this->label1->Text = L"SCORE";
			// 
			// groupBox1
			// 
			this->groupBox1->Location = System::Drawing::Point(121, 103);
			this->groupBox1->Name = L"groupBox1";
			this->groupBox1->Size = System::Drawing::Size(490, 310);
			this->groupBox1->TabIndex = 1;
			this->groupBox1->TabStop = false;
			// 
			// back
			// 
			this->back->Location = System::Drawing::Point(25, 645);
			this->back->Name = L"back";
			this->back->Size = System::Drawing::Size(117, 46);
			this->back->TabIndex = 0;
			this->back->Text = L"BACK";
			this->back->UseVisualStyleBackColor = true;
			this->back->Click += gcnew System::EventHandler(this, &MyForm::back_Click);
			// 
			// c01
			// 
			this->c01->Image = (cli::safe_cast<System::Drawing::Image^>(resources->GetObject(L"c01.Image")));
			this->c01->Location = System::Drawing::Point(39, 634);
			this->c01->Name = L"c01";
			this->c01->Size = System::Drawing::Size(89, 68);
			this->c01->SizeMode = System::Windows::Forms::PictureBoxSizeMode::StretchImage;
			this->c01->TabIndex = 0;
			this->c01->TabStop = false;
			this->c01->Visible = false;
			// 
			// c02
			// 
			this->c02->Image = (cli::safe_cast<System::Drawing::Image^>(resources->GetObject(L"c02.Image")));
			this->c02->Location = System::Drawing::Point(161, 634);
			this->c02->Name = L"c02";
			this->c02->Size = System::Drawing::Size(89, 68);
			this->c02->SizeMode = System::Windows::Forms::PictureBoxSizeMode::StretchImage;
			this->c02->TabIndex = 1;
			this->c02->TabStop = false;
			this->c02->Visible = false;
			// 
			// emptybox
			// 
			this->emptybox->Image = (cli::safe_cast<System::Drawing::Image^>(resources->GetObject(L"emptybox.Image")));
			this->emptybox->Location = System::Drawing::Point(285, 634);
			this->emptybox->Name = L"emptybox";
			this->emptybox->Size = System::Drawing::Size(89, 68);
			this->emptybox->SizeMode = System::Windows::Forms::PictureBoxSizeMode::StretchImage;
			this->emptybox->TabIndex = 2;
			this->emptybox->TabStop = false;
			this->emptybox->Visible = false;
			// 
			// c03
			// 
			this->c03->Image = (cli::safe_cast<System::Drawing::Image^>(resources->GetObject(L"c03.Image")));
			this->c03->Location = System::Drawing::Point(393, 634);
			this->c03->Name = L"c03";
			this->c03->Size = System::Drawing::Size(89, 68);
			this->c03->SizeMode = System::Windows::Forms::PictureBoxSizeMode::StretchImage;
			this->c03->TabIndex = 3;
			this->c03->TabStop = false;
			this->c03->Visible = false;
			// 
			// c04
			// 
			this->c04->Image = (cli::safe_cast<System::Drawing::Image^>(resources->GetObject(L"c04.Image")));
			this->c04->Location = System::Drawing::Point(642, 634);
			this->c04->Name = L"c04";
			this->c04->Size = System::Drawing::Size(89, 68);
			this->c04->SizeMode = System::Windows::Forms::PictureBoxSizeMode::StretchImage;
			this->c04->TabIndex = 4;
			this->c04->TabStop = false;
			this->c04->Visible = false;
			// 
			// c05
			// 
			this->c05->Image = (cli::safe_cast<System::Drawing::Image^>(resources->GetObject(L"c05.Image")));
			this->c05->Location = System::Drawing::Point(522, 634);
			this->c05->Name = L"c05";
			this->c05->Size = System::Drawing::Size(89, 68);
			this->c05->SizeMode = System::Windows::Forms::PictureBoxSizeMode::StretchImage;
			this->c05->TabIndex = 5;
			this->c05->TabStop = false;
			this->c05->Visible = false;
			// 
			// label2
			// 
			this->label2->AutoSize = true;
			this->label2->Location = System::Drawing::Point(131, 504);
			this->label2->Name = L"label2";
			this->label2->Size = System::Drawing::Size(70, 13);
			this->label2->TabIndex = 3;
			this->label2->Text = L"                     ";
			// 
			// MyForm
			// 
			this->AutoScaleDimensions = System::Drawing::SizeF(6, 13);
			this->AutoScaleMode = System::Windows::Forms::AutoScaleMode::Font;
			this->ClientSize = System::Drawing::Size(752, 714);
			this->Controls->Add(this->panel1);
			this->Controls->Add(this->button2);
			this->Controls->Add(this->button1);
			this->Controls->Add(this->c01);
			this->Controls->Add(this->c02);
			this->Controls->Add(this->emptybox);
			this->Controls->Add(this->c03);
			this->Controls->Add(this->c05);
			this->Controls->Add(this->c04);
			this->Name = L"MyForm";
			this->Text = L"MyForm";
			this->panel1->ResumeLayout(false);
			this->panel1->PerformLayout();
			(cli::safe_cast<System::ComponentModel::ISupportInitialize^>(this->c01))->EndInit();
			(cli::safe_cast<System::ComponentModel::ISupportInitialize^>(this->c02))->EndInit();
			(cli::safe_cast<System::ComponentModel::ISupportInitialize^>(this->emptybox))->EndInit();
			(cli::safe_cast<System::ComponentModel::ISupportInitialize^>(this->c03))->EndInit();
			(cli::safe_cast<System::ComponentModel::ISupportInitialize^>(this->c04))->EndInit();
			(cli::safe_cast<System::ComponentModel::ISupportInitialize^>(this->c05))->EndInit();
			this->ResumeLayout(false);

		}
#pragma endregion
	public:Void mousedown(Object^ sender, MouseEventArgs^ e) {

		//getting index no. for array for picked up candy
		 xp1 = (int)(groupBox1->PointToClient(this->MousePosition).Y / 60);
		 yp1 = (int)(groupBox1->PointToClient(this->MousePosition).X / 60);


		 //allowing drop to nearby candies made
		 if (xp1 > 0)
		 {
			 Candy::MyForm::level[xp1 - 1, yp1]->AllowDrop = true;
		 }
		 if (xp1 < 4)
		 {
			 Candy::MyForm::level[xp1 + 1, yp1]->AllowDrop = true;
		 }
		 if (yp1 > 0)
		 {
			 Candy::MyForm::level[xp1, yp1 - 1]->AllowDrop = true;
		 }
		 if (yp1 < 7)
		 {
			 Candy::MyForm::level[xp1, yp1 + 1]->AllowDrop = true;
		 }

		Candy::MyForm::level[xp1, yp1]->DoDragDrop(level[xp1, yp1]->Image, System::Windows::Forms::DragDropEffects::Copy);
	}


	private:Void dragenter(Object^ sender, DragEventArgs^ e) {
		e->Effect = System::Windows::Forms::DragDropEffects::Copy;

		//getting index no. for array for candy to be dropped
		xp2 = (int)(groupBox1->PointToClient(this->MousePosition).Y / 60);
	    yp2 = (int)(groupBox1->PointToClient(this->MousePosition).X / 60);
		pb->Image = Candy::MyForm::level[xp1, yp1]->Image;
		Candy::MyForm::level[xp1, yp1]->Image = Candy::MyForm::level[xp2, yp2]->Image;	 
	}

	public:Void dragdrop(Object^ sender, DragEventArgs^ e) {
		Candy::MyForm::level[xp2, yp2]->Image = pb->Image;


		//allowing drop false to nearby candies made
		if (xp1 > 0)
		{
			Candy::MyForm::level[xp1 - 1, yp1]->AllowDrop = false;
		}
		if (xp1 < 4)
		{
			Candy::MyForm::level[xp1 + 1, yp1]->AllowDrop = false;
		}
		if (yp1 > 0)
		{
			Candy::MyForm::level[xp1, yp1 - 1]->AllowDrop = false;
		}
		if (yp1 < 7)
		{
			Candy::MyForm::level[xp1, yp1 + 1]->AllowDrop = false;
		}


		//calling functions for matches of candies
		matching play;
		int res = -1;
		if (yp2 > 0 && yp2 < 7)
		{
			res=play.hormid();
		}
		if ( xp2 > 0 && xp2 < 4)
		{
			res=play.vermid();
		}
		if (yp2 < 6)
		{
			res=play.horleft();
		}
		if (yp2 > 1)
		{
			res=play.horright();
		}
		if (xp2 < 3)
		{
			res=play.verup();
		}
		if (xp2 > 1)
		{
			res=play.verdown();
		}
		label2->Text = score.ToString();
		fc.droppingcandies();
		label2->Text = score.ToString();
		if (res == -1)
		{
			pb->Image= Candy::MyForm::level[xp1, yp1]->Image;
			 Candy::MyForm::level[xp1, yp1]->Image= Candy::MyForm::level[xp2, yp2]->Image;
			 Candy::MyForm::level[xp2, yp2]->Image = pb->Image;
		}
		
		
	}

		   //play button
	private: System::Void button1_Click(System::Object^  sender, System::EventArgs^  e) {
		panel1->Visible = true;
	}

			 //exit button
	private: System::Void button2_Click(System::Object^  sender, System::EventArgs^  e) {
		this->Close();
	}

			 //back button
	private: System::Void back_Click(System::Object^  sender, System::EventArgs^  e) {
		panel1->Visible = false;
	}
};


//filling level with candies on start
void Candy::MyForm::gamestate::fillwithcandies()
{
	int Xpos = 10, Ypos = 10;
	for (int j = 0; j < 5; j++)
	{
		for (int i = 0; i < 8; i++)
		{
			int rnd = rand() % 5;
			Candy::MyForm::level[j, i] = gcnew PictureBox();
			Candy::MyForm::panel1->Controls->Add(Candy::MyForm::level[j, i]);			
			Candy::MyForm::level[j, i]->Parent = Candy::MyForm::groupBox1;
			Candy::MyForm::level[j, i]->Location = System::Drawing::Point(Xpos, Ypos);
			Candy::MyForm::level[j, i]->Size = System::Drawing::Size(50, 50);
			Candy::MyForm::level[j, i]->Image = Candy::MyForm::candies[rnd]->Image;
			Candy::MyForm::level[j, i]->SizeMode = PictureBoxSizeMode::StretchImage;
			Xpos = Xpos + 60;
		}
		Xpos = 10;
		Ypos = Ypos + 60;
	}

}

//matching candies on start and after dropping
void Candy::MyForm::gamestate::matchingcandies()
{
	int i, j, k = i, flag = 0, t;

	for (j = 0; j < 5; j++)
	{
		for (i = 0; i < 8; i++)
		{
			k = i;
			flag = 0;
			while (k < 7 && Candy::MyForm::level[j, i]->Image == Candy::MyForm::level[j, k]->Image )
			{
				k++;
				flag++;
			}
			if (flag > 2)
			{
				for (t = i; t < k; t++)
				{
					Candy::MyForm::level[j, t]->Image = Candy::MyForm::emptybox->Image;
					score++;
					xp2 = j;
					yp2 = t-1;
				}
			}

			flag = 0;
			k = j;
			while (k < 4 && Candy::MyForm::level[j, i]->Image == Candy::MyForm::level[k, i]->Image )
			{
				k++;
				flag++;
			}
			if (flag > 2)
			{
				for (t = j; t < k; t++)
				{
					Candy::MyForm::level[t, i]->Image = Candy::MyForm::emptybox->Image;
					score++;
					xp2 = t-1;
					yp2 = i;
				}
			}
			

		}
	}
	fc.droppingcandies();

}

int Candy::MyForm::gamestate::droppingcandies()
{
	int i, j,k,q;
	if (level[xp2, yp2]->Image == emptybox->Image)
	{
		for (j = 4; j > 0; j--)
		{
			for (i = 0; i < 8; i++)
			{

				
				while (level[j, i]->Image == emptybox->Image)
				{
					k = j;
					for (q = k; q > 0; q--)
					{
						level[k, i]->Image = level[k - 1, i]->Image;
						k--;
					}
					int rnd = rand() % 5;
					level[0, i]->Image = candies[rnd]->Image;
				}
				

			}
		}
		matchingcandies();
	}
	else
	{
		return 0;
	}
}


//matching candies for horizontal mid

int Candy::MyForm::matching::hormid()
{
	if (Candy::MyForm::level[xp2, yp2]->Image == Candy::MyForm::level[xp2, yp2 -1]->Image && Candy::MyForm::level[xp2, yp2]->Image == Candy::MyForm::level[xp2, yp2 + 1]->Image)
	{
		Candy::MyForm::level[xp2, yp2 + 1]->Image = emptybox->Image;
		Candy::MyForm::level[xp2, yp2 -1]->Image = emptybox->Image;
		Candy::MyForm::level[xp2, yp2]->Image = emptybox->Image;
		score += 3;
		return 0;
	}
	return -1;
}

//matching candes for vertical mid
int Candy::MyForm::matching::vermid()
{
	if (Candy::MyForm::level[xp2, yp2]->Image == Candy::MyForm::level[xp2 - 1, yp2 ]->Image && Candy::MyForm::level[xp2, yp2]->Image == Candy::MyForm::level[xp2 + 1, yp2]->Image )
	{
		Candy::MyForm::level[xp2 + 1, yp2 ]->Image = emptybox->Image;
		Candy::MyForm::level[xp2 - 1, yp2 ]->Image = emptybox->Image;
		Candy::MyForm::level[xp2, yp2]->Image = emptybox->Image;
		score += 3;
		return 0;
	}
	return -1;
}

//matching candes for horizontal left
int Candy::MyForm::matching::horleft()
{
	if (Candy::MyForm::level[xp2, yp2]->Image == Candy::MyForm::level[xp2, yp2 + 1]->Image && Candy::MyForm::level[xp2, yp2]->Image == Candy::MyForm::level[xp2, yp2 + 2]->Image )
	{
		Candy::MyForm::level[xp2, yp2 + 1]->Image = emptybox->Image;
		Candy::MyForm::level[xp2, yp2 + 2]->Image = emptybox->Image;
		Candy::MyForm::level[xp2, yp2]->Image = emptybox->Image;
		score += 3;
		return 0;
	}
	return -1;
}

//matching candes for vertical up
int Candy::MyForm::matching::verup()
{
	if (Candy::MyForm::level[xp2, yp2]->Image == Candy::MyForm::level[xp2 + 1, yp2 ]->Image && Candy::MyForm::level[xp2, yp2]->Image == Candy::MyForm::level[xp2 + 2, yp2 ]->Image )
	{
		Candy::MyForm::level[xp2 + 1, yp2 ]->Image = emptybox->Image;
		Candy::MyForm::level[xp2 + 2, yp2 ]->Image = emptybox->Image;
		Candy::MyForm::level[xp2, yp2]->Image = emptybox->Image;
		score += 3;
		return 0;
	}
	return -1;
}

//matching candes for horizontal right
int Candy::MyForm::matching::horright()
{
	if (Candy::MyForm::level[xp2, yp2]->Image == Candy::MyForm::level[xp2, yp2 - 1]->Image && Candy::MyForm::level[xp2, yp2]->Image == Candy::MyForm::level[xp2, yp2 - 2]->Image )
	{
		Candy::MyForm::level[xp2, yp2 - 1]->Image = emptybox->Image;
		Candy::MyForm::level[xp2, yp2 - 2]->Image = emptybox->Image;
		Candy::MyForm::level[xp2, yp2]->Image = emptybox->Image;
		score += 3;
		return 0;
	}
	return -1;
}

//matching candes for vertical down
int Candy::MyForm::matching::verdown()
{
	if (Candy::MyForm::level[xp2, yp2]->Image == Candy::MyForm::level[xp2 - 1, yp2 ]->Image && Candy::MyForm::level[xp2, yp2]->Image == Candy::MyForm::level[xp2 - 2, yp2 ]->Image )
	{
		Candy::MyForm::level[xp2 - 1, yp2 ]->Image = emptybox->Image;
		Candy::MyForm::level[xp2 - 2, yp2 ]->Image = emptybox->Image;
		Candy::MyForm::level[xp2, yp2]->Image = emptybox->Image;
		score += 3;
		return 0;
	}
	return -1;
}

}
